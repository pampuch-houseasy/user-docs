---
openapi: 3.0.1
info:
  title: HouseasyCloud User API
  version: v1.1.0
paths:
  "/api/me/centrals":
    get:
      tags:
      - Centrals
      operationId: Get a List of Current User's Centrals
      responses:
        '200':
          description: List all centrals of users
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/CentralUserDTO"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
      - Bearer: []
  "/api/me/centrals/{centralId}/users":
    post:
      tags:
      - Centrals
      operationId: Add User to Central
      parameters:
      - name: centralId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AddUserToCentralRequestDTO"
          text/json:
            schema:
              "$ref": "#/components/schemas/AddUserToCentralRequestDTO"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/AddUserToCentralRequestDTO"
      responses:
        '200':
          description: Added User to Central
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserCentralDTO"
        '400':
          description: Invalid code length
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Central or User not found
        '409':
          description: UserCentral already exists
      security:
      - Bearer: []
    get:
      tags:
      - Centrals
      operationId: Get Users from Central
      parameters:
      - name: centralId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: Users that have access to this Central
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/UserFromCentralResponseDTO"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
      - Bearer: []
  "/api/me/centrals/{centralId}/users/{userId}":
    delete:
      tags:
      - Centrals
      operationId: Remove User access to a Central
      parameters:
      - name: centralId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: Remove User access to a Central
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserCentralDTO"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User or Central not found
      security:
      - Bearer: []
    put:
      tags:
      - Centrals
      operationId: Update User permission
      parameters:
      - name: centralId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PermissionRequestDTO"
          text/json:
            schema:
              "$ref": "#/components/schemas/PermissionRequestDTO"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/PermissionRequestDTO"
      responses:
        '200':
          description: Updated User permission
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserCentralDTO"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Central or User not found
      security:
      - Bearer: []
  "/api/me/centrals/{centralId}/modules/{modulePairingId}/control":
    post:
      tags:
      - Centrals
      operationId: Control a module
      parameters:
      - name: centralId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - name: modulePairingId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SentCommandRequestDTO"
          text/json:
            schema:
              "$ref": "#/components/schemas/SentCommandRequestDTO"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/SentCommandRequestDTO"
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
      - Bearer: []
  "/api/me/centrals/{centralId}/rooms/{roomId}/users":
    post:
      tags:
      - Centrals
      operationId: Add a User to Room
      parameters:
      - name: centralId
        in: path
        description: Desired centralId
        required: true
        schema:
          type: integer
          format: int32
      - name: roomId
        in: path
        description: Desired roomId
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AddUserToRoomRequestDTO"
          text/json:
            schema:
              "$ref": "#/components/schemas/AddUserToRoomRequestDTO"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/AddUserToRoomRequestDTO"
      responses:
        '200':
          description: Added a User successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AddUserToRoomResponseDTO"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User or Room not found
        '409':
          description: User already added
      security:
      - Bearer: []
  "/api/me/centrals/{centralId}/rooms/{roomId}/users/{userId}":
    delete:
      tags:
      - Centrals
      operationId: Delete a User from Room
      parameters:
      - name: centralId
        in: path
        description: Desired roomId
        required: true
        schema:
          type: integer
          format: int32
      - name: roomId
        in: path
        description: Desired roomId
        required: true
        schema:
          type: integer
          format: int32
      - name: userId
        in: path
        description: Desired userId
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: Deleted a User successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DeleteUserFromRoomResponseDTO"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User or Location not found
      security:
      - Bearer: []
  "/api/me/centrals/{centralId}/location":
    put:
      tags:
      - Centrals
      operationId: Update Central's Location
      parameters:
      - name: centralId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AddCentraltoLocationRequestDTO"
          text/json:
            schema:
              "$ref": "#/components/schemas/AddCentraltoLocationRequestDTO"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/AddCentraltoLocationRequestDTO"
      responses:
        '200':
          description: Successfully updated Central's Location
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CentralUserDTO"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Location or Central not found
      security:
      - Bearer: []
  "/api/me/centrals/{centralId}/rooms/{id}/users":
    get:
      tags:
      - Centrals
      operationId: Get Users from Room
      parameters:
      - name: centralId
        in: path
        description: Desired central's Id
        required: true
        schema:
          type: integer
          format: int32
      - name: id
        in: path
        description: Desired Room's Id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: Desired Room
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/UserUserDTO"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Room not found
      security:
      - Bearer: []
  "/api/infrared-device-manufacturers":
    get:
      tags:
      - Infrared Device Manufacturers
      operationId: Get a list of Infrared Device Manufacturers
      parameters:
      - name: deviceType
        in: query
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: List of Infrared Device Manufacturers
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/InfraredDeviceManufacturerDTO"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  "/api/infrared-devices":
    get:
      tags:
      - Infrared Devices
      operationId: Get All Infrared Devices
      parameters:
      - name: deviceType
        in: query
        schema:
          type: integer
          format: int32
      - name: manufacturerId
        in: query
        schema:
          type: integer
          format: int32
      - name: includeCommands
        in: query
        schema:
          type: boolean
          default: true
      responses:
        '200':
          description: List of Infrared Devices
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/InfraredDeviceUserDTO"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  "/api/me/locations":
    post:
      tags:
      - Locations
      operationId: Create a Location
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateLocationRequestDTO"
          text/json:
            schema:
              "$ref": "#/components/schemas/CreateLocationRequestDTO"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/CreateLocationRequestDTO"
      responses:
        '200':
          description: Location created successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/LocationDTO"
        '400':
          description: Invalid Location name
    get:
      tags:
      - Locations
      operationId: Get all current User's Locations
      parameters:
      - name: centrals
        in: query
        description: Include Centrals
        schema:
          type: boolean
      responses:
        '200':
          description: All Locations returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/LocationWithCentralsDTO"
  "/api/me/locations/{locationId}":
    put:
      tags:
      - Locations
      operationId: Update Location's name
      parameters:
      - name: locationId
        in: path
        description: Location Id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateLocationRequestDTO"
          text/json:
            schema:
              "$ref": "#/components/schemas/UpdateLocationRequestDTO"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/UpdateLocationRequestDTO"
      responses:
        '200':
          description: Location name Updated
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/LocationDTO"
        '403':
          description: User without permission
        '404':
          description: Location not found
    delete:
      tags:
      - Locations
      operationId: Delete a Location
      parameters:
      - name: locationId
        in: path
        description: Location Id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: Location deleted successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/LocationDTO"
        '403':
          description: User without permission
        '404':
          description: Location not found
        '409':
          description: Location has Centrals
    get:
      tags:
      - Locations
      operationId: Get a current User's Location
      parameters:
      - name: locationId
        in: path
        description: Location Id
        required: true
        schema:
          type: integer
          format: int32
      - name: centrals
        in: query
        description: Include Centrals
        schema:
          type: boolean
      responses:
        '200':
          description: Desired Locations returned successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/LocationWithCentralsDTO"
        '404':
          description: Location not found
  "/api/me":
    get:
      tags:
      - Users
      operationId: Get Current User's Profile
      responses:
        '200':
          description: Get user
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserDTO"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User not found
      security:
      - Bearer: []
    put:
      tags:
      - Users
      operationId: Edit a User's Profile
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/EditUserRequestDTO"
          text/json:
            schema:
              "$ref": "#/components/schemas/EditUserRequestDTO"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/EditUserRequestDTO"
      responses:
        '200':
          description: User was edited
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserDTO"
        '400':
          description: The fields CPF, NAME, ZIP CODE, CITY, STATE, E MAIL or FIREBASE
            ID is invalid
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '409':
          description: CPF already registered
      security:
      - Bearer: []
  "/api/me/picture":
    put:
      tags:
      - Users
      operationId: Set User Picture
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
            encoding:
              file:
                style: form
      responses:
        '200':
          description: User Picture was edited
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserDTO"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
      - Bearer: []
  "/api/me/email":
    put:
      tags:
      - Users
      operationId: Update user email
      responses:
        '200':
          description: User email was edited
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserDTO"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
      - Firebase: []
  "/api/me/device-token":
    put:
      tags:
      - Users
      operationId: Create or Update a user device token
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateUserDeviceTokenRequestDTO"
          text/json:
            schema:
              "$ref": "#/components/schemas/CreateUserDeviceTokenRequestDTO"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/CreateUserDeviceTokenRequestDTO"
      responses:
        '200':
          description: User device token was created/edited
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User not found
      security:
      - Bearer: []
  "/api/me/reset-password":
    post:
      tags:
      - Users
      operationId: Reset user password
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ResetPasswordRequestDTO"
          text/json:
            schema:
              "$ref": "#/components/schemas/ResetPasswordRequestDTO"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/ResetPasswordRequestDTO"
      responses:
        '200':
          description: Reset password email send successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResetPasswordDTO"
        '404':
          description: Email not found
  "/api/me/update-password":
    post:
      tags:
      - Users
      operationId: Update user password
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdatePasswordRequestDTO"
          text/json:
            schema:
              "$ref": "#/components/schemas/UpdatePasswordRequestDTO"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/UpdatePasswordRequestDTO"
      responses:
        '200':
          description: Password updated successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UpdatePasswordResponseDTO"
        '400':
          description: Invalid password length
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
      - Firebase: []
  "/api/me/voice-assistants/pair":
    post:
      tags:
      - Users
      operationId: Pair Assistant Voice
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PairVoiceAssistant"
          text/json:
            schema:
              "$ref": "#/components/schemas/PairVoiceAssistant"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/PairVoiceAssistant"
      responses:
        '200':
          description: Voice assistant is paired
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
      - Bearer: []
  "/api/me/voice-assistants/unpair":
    post:
      tags:
      - Users
      operationId: Unpair Assistant Voice
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PairVoiceAssistant"
          text/json:
            schema:
              "$ref": "#/components/schemas/PairVoiceAssistant"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/PairVoiceAssistant"
      responses:
        '200':
          description: Voice assistant is paired
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
      - Bearer: []
  "/api/me/finish-update-password":
    post:
      tags:
      - Users
      operationId: Update user flag password
      responses:
        '200':
          description: Password flag was updated
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserDTO"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
      - Bearer: []
  "/api/Users":
    post:
      tags:
      - Users
      operationId: Create a User
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateUserRequestDTO"
          text/json:
            schema:
              "$ref": "#/components/schemas/CreateUserRequestDTO"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/CreateUserRequestDTO"
      responses:
        '200':
          description: User was created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserDTO"
        '400':
          description: The fields CPF, NAME, ZIP CODE, CITY, STATE, E MAIL or FIREBASE
            ID is invalid
        '409':
          description: User already exists
  "/api/Users/login":
    post:
      tags:
      - Users
      operationId: User Login
      responses:
        '200':
          description: Returns a token and refresh token
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserLoginResponseDTO"
        '400':
          description: Credentials or UserType invalid
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
      - Firebase: []
  "/api/Users/refresh":
    post:
      tags:
      - Users
      operationId: User Refresh token
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RefreshTokenRequestDTO"
          text/json:
            schema:
              "$ref": "#/components/schemas/RefreshTokenRequestDTO"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/RefreshTokenRequestDTO"
      responses:
        '200':
          description: Returns a token and refresh token
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserLoginResponseDTO"
        '400':
          description: Invalid token
  "/api/Users/search":
    post:
      tags:
      - Users
      operationId: Search User by Email or Code
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SearchUserRequestDTO"
          text/json:
            schema:
              "$ref": "#/components/schemas/SearchUserRequestDTO"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/SearchUserRequestDTO"
      responses:
        '200':
          description: Disered user returned successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserDTO"
        '404':
          description: User not found
components:
  schemas:
    AddCentraltoLocationRequestDTO:
      type: object
      properties:
        locationId:
          type: integer
          format: int32
      additionalProperties: false
    AddUserToCentralRequestDTO:
      type: object
      properties:
        code:
          type: string
          nullable: true
        isAdmin:
          type: boolean
      additionalProperties: false
    AddUserToRoomRequestDTO:
      type: object
      properties:
        userId:
          type: integer
          format: int32
      additionalProperties: false
    AddUserToRoomResponseDTO:
      type: object
      properties:
        userId:
          type: integer
          format: int32
        roomId:
          type: integer
          format: int32
        id:
          type: integer
          format: int32
      additionalProperties: false
    CentralDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
        macAddress:
          type: string
          nullable: true
        latitude:
          type: number
          format: float
          nullable: true
        longitude:
          type: number
          format: float
          nullable: true
        version:
          type: string
          nullable: true
        lastSeen:
          type: string
          format: date-time
          nullable: true
        updateDate:
          type: string
          format: date-time
          nullable: true
        name:
          type: string
          nullable: true
        status:
          type: string
          nullable: true
        serialNumber:
          type: string
          nullable: true
        communicationType:
          type: integer
          format: int32
        createdBy:
          type: string
          nullable: true
        isBlocked:
          type: boolean
        locationId:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
    CentralUserDTO:
      type: object
      properties:
        centralId:
          type: integer
          format: int32
        macAddress:
          type: string
          nullable: true
        latitude:
          type: number
          format: float
          nullable: true
        longitude:
          type: number
          format: float
          nullable: true
        name:
          type: string
          nullable: true
        creationDate:
          type: string
          format: date-time
        version:
          type: string
          nullable: true
        serialNumber:
          type: string
          nullable: true
        communicationType:
          type: integer
          format: int32
        locationId:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
    CreateLocationRequestDTO:
      required:
      - name
      type: object
      properties:
        name:
          type: string
      additionalProperties: false
    CreateUserDeviceTokenRequestDTO:
      type: object
      properties:
        token:
          type: string
          nullable: true
        lastToken:
          type: string
          nullable: true
      additionalProperties: false
    CreateUserRequestDTO:
      required:
      - email
      - name
      - password
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        birthdate:
          type: string
          format: date-time
          nullable: true
        cpf:
          type: string
          nullable: true
        gender:
          type: string
          format: M/F
        zipCode:
          type: string
          nullable: true
        state:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        district:
          type: string
          nullable: true
        addressLine1:
          type: string
          nullable: true
        addressLine2:
          type: string
          nullable: true
        streetNumber:
          type: string
          nullable: true
        password:
          minLength: 6
          type: string
      additionalProperties: false
    DeleteUserFromRoomResponseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
        userId:
          type: integer
          format: int32
        roomId:
          type: integer
          format: int32
      additionalProperties: false
    EditUserRequestDTO:
      type: object
      properties:
        name:
          type: string
          nullable: true
        birthdate:
          type: string
          format: date-time
          nullable: true
        cpf:
          type: string
          nullable: true
        gender:
          type: string
          format: M/F
        zipCode:
          type: string
          nullable: true
        state:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        district:
          type: string
          nullable: true
        addressLine1:
          type: string
          nullable: true
        addressLine2:
          type: string
          nullable: true
        streetNumber:
          type: string
          nullable: true
      additionalProperties: false
    InfraredDeviceManufacturerDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        imageUrl:
          type: string
          nullable: true
        rowVersion:
          type: integer
          format: int64
        deviceTypes:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
      additionalProperties: false
    InfraredDeviceUserDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        type:
          type: integer
          format: int32
        manufacturerId:
          type: integer
          format: int32
      additionalProperties: false
    LocationDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        users:
          type: array
          items:
            "$ref": "#/components/schemas/UserUserDTO"
          nullable: true
      additionalProperties: false
    LocationWithCentralsDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        users:
          type: array
          items:
            "$ref": "#/components/schemas/UserUserDTO"
          nullable: true
        centrals:
          type: array
          items:
            "$ref": "#/components/schemas/CentralDTO"
          nullable: true
      additionalProperties: false
    PairVoiceAssistant:
      type: object
      properties:
        voiceAssistant:
          type: integer
          format: int32
      additionalProperties: false
    PermissionRequestDTO:
      type: object
      properties:
        isAdmin:
          type: boolean
      additionalProperties: false
    RefreshTokenRequestDTO:
      type: object
      properties:
        refreshToken:
          type: string
          nullable: true
      additionalProperties: false
    ResetPasswordDTO:
      type: object
      properties:
        email:
          type: string
          nullable: true
        requestType:
          type: string
          nullable: true
      additionalProperties: false
    ResetPasswordRequestDTO:
      type: object
      properties:
        email:
          type: string
          nullable: true
      additionalProperties: false
    SearchUserRequestDTO:
      type: object
      properties:
        code:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
      additionalProperties: false
    SentCommandRequestDTO:
      type: object
      properties:
        moduleId:
          type: integer
          format: int32
          nullable: true
        channel:
          type: integer
          format: int32
          nullable: true
        commandType:
          type: integer
          format: int32
          nullable: true
        infraredDeviceId:
          type: integer
          format: int32
          nullable: true
        statusCode:
          type: integer
          format: int32
        triggeredType:
          type: integer
          format: int32
        remoteId:
          type: integer
          format: int32
          nullable: true
        state:
          type: boolean
          nullable: true
      additionalProperties: false
    UpdateLocationRequestDTO:
      required:
      - name
      type: object
      properties:
        name:
          type: string
      additionalProperties: false
    UpdatePasswordRequestDTO:
      required:
      - password
      type: object
      properties:
        password:
          minLength: 6
          type: string
      additionalProperties: false
    UpdatePasswordResponseDTO:
      type: object
      properties:
        idToken:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
      additionalProperties: false
    UserCentralDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
        userId:
          type: integer
          format: int32
        isAdmin:
          type: boolean
        userName:
          type: string
          nullable: true
      additionalProperties: false
    UserDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
        firebaseId:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        birthdate:
          type: string
          format: date-time
          nullable: true
        cpf:
          type: string
          nullable: true
        gender:
          type: string
          format: M/F
        zipCode:
          type: string
          nullable: true
        state:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        district:
          type: string
          nullable: true
        addressLine1:
          type: string
          nullable: true
        addressLine2:
          type: string
          nullable: true
        streetNumber:
          type: string
          nullable: true
        code:
          type: string
          nullable: true
        pictureUrl:
          type: string
          nullable: true
        creationDate:
          type: string
          format: date-time
          nullable: true
        voiceAssistant:
          type: integer
          format: int32
      additionalProperties: false
    UserFromCentralResponseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
        isAdmin:
          type: boolean
        userName:
          type: string
          nullable: true
      additionalProperties: false
    UserLoginResponseDTO:
      type: object
      properties:
        id:
          type: string
          nullable: true
        authToken:
          type: string
          nullable: true
        expiresIn:
          type: integer
          format: int32
        refreshToken:
          type: string
          nullable: true
        defaultPassword:
          type: boolean
      additionalProperties: false
    UserUserDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        code:
          type: string
          nullable: true
        pictureUrl:
          type: string
          nullable: true
      additionalProperties: false
  securitySchemes:
    Bearer:
      type: http
      description: Insert a Bearer JWT in the Authorization header
      scheme: Bearer
      bearerFormat: JWT
    Firebase:
      type: http
      description: Insert a Firebase ID token in the Authorization header
      scheme: Bearer
      bearerFormat: JWT
